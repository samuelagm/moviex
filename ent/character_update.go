// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samuelagm/moviex/ent/character"
	"github.com/samuelagm/moviex/ent/movie"
	"github.com/samuelagm/moviex/ent/predicate"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CharacterUpdate) SetName(s string) *CharacterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableName(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetHeight sets the "height" field.
func (cu *CharacterUpdate) SetHeight(s string) *CharacterUpdate {
	cu.mutation.SetHeight(s)
	return cu
}

// SetMass sets the "mass" field.
func (cu *CharacterUpdate) SetMass(s string) *CharacterUpdate {
	cu.mutation.SetMass(s)
	return cu
}

// SetHairColor sets the "hair_color" field.
func (cu *CharacterUpdate) SetHairColor(s string) *CharacterUpdate {
	cu.mutation.SetHairColor(s)
	return cu
}

// SetSkinColor sets the "skin_color" field.
func (cu *CharacterUpdate) SetSkinColor(s string) *CharacterUpdate {
	cu.mutation.SetSkinColor(s)
	return cu
}

// SetEyeColor sets the "eye_color" field.
func (cu *CharacterUpdate) SetEyeColor(s string) *CharacterUpdate {
	cu.mutation.SetEyeColor(s)
	return cu
}

// SetBirthYear sets the "birth_year" field.
func (cu *CharacterUpdate) SetBirthYear(s string) *CharacterUpdate {
	cu.mutation.SetBirthYear(s)
	return cu
}

// SetGender sets the "gender" field.
func (cu *CharacterUpdate) SetGender(s string) *CharacterUpdate {
	cu.mutation.SetGender(s)
	return cu
}

// SetFilms sets the "films" field.
func (cu *CharacterUpdate) SetFilms(s []string) *CharacterUpdate {
	cu.mutation.SetFilms(s)
	return cu
}

// SetCreated sets the "created" field.
func (cu *CharacterUpdate) SetCreated(t time.Time) *CharacterUpdate {
	cu.mutation.SetCreated(t)
	return cu
}

// SetEdited sets the "edited" field.
func (cu *CharacterUpdate) SetEdited(t time.Time) *CharacterUpdate {
	cu.mutation.SetEdited(t)
	return cu
}

// SetURL sets the "url" field.
func (cu *CharacterUpdate) SetURL(s string) *CharacterUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// AddFilmIDs adds the "film" edge to the Movie entity by IDs.
func (cu *CharacterUpdate) AddFilmIDs(ids ...int) *CharacterUpdate {
	cu.mutation.AddFilmIDs(ids...)
	return cu
}

// AddFilm adds the "film" edges to the Movie entity.
func (cu *CharacterUpdate) AddFilm(m ...*Movie) *CharacterUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddFilmIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// ClearFilm clears all "film" edges to the Movie entity.
func (cu *CharacterUpdate) ClearFilm() *CharacterUpdate {
	cu.mutation.ClearFilm()
	return cu
}

// RemoveFilmIDs removes the "film" edge to Movie entities by IDs.
func (cu *CharacterUpdate) RemoveFilmIDs(ids ...int) *CharacterUpdate {
	cu.mutation.RemoveFilmIDs(ids...)
	return cu
}

// RemoveFilm removes "film" edges to Movie entities.
func (cu *CharacterUpdate) RemoveFilm(m ...*Movie) *CharacterUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveFilmIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: character.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldName,
		})
	}
	if value, ok := cu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHeight,
		})
	}
	if value, ok := cu.mutation.Mass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldMass,
		})
	}
	if value, ok := cu.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHairColor,
		})
	}
	if value, ok := cu.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSkinColor,
		})
	}
	if value, ok := cu.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldEyeColor,
		})
	}
	if value, ok := cu.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldBirthYear,
		})
	}
	if value, ok := cu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cu.mutation.Films(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: character.FieldFilms,
		})
	}
	if value, ok := cu.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldCreated,
		})
	}
	if value, ok := cu.mutation.Edited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldEdited,
		})
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldURL,
		})
	}
	if cu.mutation.FilmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFilmIDs(); len(nodes) > 0 && !cu.mutation.FilmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FilmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetName sets the "name" field.
func (cuo *CharacterUpdateOne) SetName(s string) *CharacterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableName(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetHeight sets the "height" field.
func (cuo *CharacterUpdateOne) SetHeight(s string) *CharacterUpdateOne {
	cuo.mutation.SetHeight(s)
	return cuo
}

// SetMass sets the "mass" field.
func (cuo *CharacterUpdateOne) SetMass(s string) *CharacterUpdateOne {
	cuo.mutation.SetMass(s)
	return cuo
}

// SetHairColor sets the "hair_color" field.
func (cuo *CharacterUpdateOne) SetHairColor(s string) *CharacterUpdateOne {
	cuo.mutation.SetHairColor(s)
	return cuo
}

// SetSkinColor sets the "skin_color" field.
func (cuo *CharacterUpdateOne) SetSkinColor(s string) *CharacterUpdateOne {
	cuo.mutation.SetSkinColor(s)
	return cuo
}

// SetEyeColor sets the "eye_color" field.
func (cuo *CharacterUpdateOne) SetEyeColor(s string) *CharacterUpdateOne {
	cuo.mutation.SetEyeColor(s)
	return cuo
}

// SetBirthYear sets the "birth_year" field.
func (cuo *CharacterUpdateOne) SetBirthYear(s string) *CharacterUpdateOne {
	cuo.mutation.SetBirthYear(s)
	return cuo
}

// SetGender sets the "gender" field.
func (cuo *CharacterUpdateOne) SetGender(s string) *CharacterUpdateOne {
	cuo.mutation.SetGender(s)
	return cuo
}

// SetFilms sets the "films" field.
func (cuo *CharacterUpdateOne) SetFilms(s []string) *CharacterUpdateOne {
	cuo.mutation.SetFilms(s)
	return cuo
}

// SetCreated sets the "created" field.
func (cuo *CharacterUpdateOne) SetCreated(t time.Time) *CharacterUpdateOne {
	cuo.mutation.SetCreated(t)
	return cuo
}

// SetEdited sets the "edited" field.
func (cuo *CharacterUpdateOne) SetEdited(t time.Time) *CharacterUpdateOne {
	cuo.mutation.SetEdited(t)
	return cuo
}

// SetURL sets the "url" field.
func (cuo *CharacterUpdateOne) SetURL(s string) *CharacterUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// AddFilmIDs adds the "film" edge to the Movie entity by IDs.
func (cuo *CharacterUpdateOne) AddFilmIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.AddFilmIDs(ids...)
	return cuo
}

// AddFilm adds the "film" edges to the Movie entity.
func (cuo *CharacterUpdateOne) AddFilm(m ...*Movie) *CharacterUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddFilmIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// ClearFilm clears all "film" edges to the Movie entity.
func (cuo *CharacterUpdateOne) ClearFilm() *CharacterUpdateOne {
	cuo.mutation.ClearFilm()
	return cuo
}

// RemoveFilmIDs removes the "film" edge to Movie entities by IDs.
func (cuo *CharacterUpdateOne) RemoveFilmIDs(ids ...int) *CharacterUpdateOne {
	cuo.mutation.RemoveFilmIDs(ids...)
	return cuo
}

// RemoveFilm removes "film" edges to Movie entities.
func (cuo *CharacterUpdateOne) RemoveFilm(m ...*Movie) *CharacterUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveFilmIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	var (
		err  error
		node *Character
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Character)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CharacterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: character.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldName,
		})
	}
	if value, ok := cuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHeight,
		})
	}
	if value, ok := cuo.mutation.Mass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldMass,
		})
	}
	if value, ok := cuo.mutation.HairColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHairColor,
		})
	}
	if value, ok := cuo.mutation.SkinColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSkinColor,
		})
	}
	if value, ok := cuo.mutation.EyeColor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldEyeColor,
		})
	}
	if value, ok := cuo.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldBirthYear,
		})
	}
	if value, ok := cuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cuo.mutation.Films(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: character.FieldFilms,
		})
	}
	if value, ok := cuo.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldCreated,
		})
	}
	if value, ok := cuo.mutation.Edited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldEdited,
		})
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldURL,
		})
	}
	if cuo.mutation.FilmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFilmIDs(); len(nodes) > 0 && !cuo.mutation.FilmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FilmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
