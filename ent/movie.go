// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samuelagm/moviex/ent/movie"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// EpisodeID holds the value of the "episode_id" field.
	EpisodeID int `json:"episode_id,omitempty"`
	// OpeningCrawl holds the value of the "opening_crawl" field.
	OpeningCrawl string `json:"opening_crawl,omitempty"`
	// Director holds the value of the "director" field.
	Director string `json:"director,omitempty"`
	// Producer holds the value of the "producer" field.
	Producer string `json:"producer,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate time.Time `json:"release_date,omitempty"`
	// Characters holds the value of the "characters" field.
	Characters []string `json:"characters,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Edited holds the value of the "edited" field.
	Edited time.Time `json:"edited,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuery when eager-loading is set.
	Edges MovieEdges `json:"edges"`
}

// MovieEdges holds the relations/edges for other nodes in the graph.
type MovieEdges struct {
	// People holds the value of the people edge.
	People []*Character `json:"people,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PeopleOrErr returns the People value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) PeopleOrErr() ([]*Character, error) {
	if e.loadedTypes[0] {
		return e.People, nil
	}
	return nil, &NotLoadedError{edge: "people"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldCharacters:
			values[i] = new([]byte)
		case movie.FieldID, movie.FieldEpisodeID:
			values[i] = new(sql.NullInt64)
		case movie.FieldTitle, movie.FieldOpeningCrawl, movie.FieldDirector, movie.FieldProducer, movie.FieldURL:
			values[i] = new(sql.NullString)
		case movie.FieldReleaseDate, movie.FieldCreated, movie.FieldEdited:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Movie", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (m *Movie) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case movie.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case movie.FieldEpisodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episode_id", values[i])
			} else if value.Valid {
				m.EpisodeID = int(value.Int64)
			}
		case movie.FieldOpeningCrawl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opening_crawl", values[i])
			} else if value.Valid {
				m.OpeningCrawl = value.String
			}
		case movie.FieldDirector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field director", values[i])
			} else if value.Valid {
				m.Director = value.String
			}
		case movie.FieldProducer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field producer", values[i])
			} else if value.Valid {
				m.Producer = value.String
			}
		case movie.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				m.ReleaseDate = value.Time
			}
		case movie.FieldCharacters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field characters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Characters); err != nil {
					return fmt.Errorf("unmarshal field characters: %w", err)
				}
			}
		case movie.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				m.Created = value.Time
			}
		case movie.FieldEdited:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field edited", values[i])
			} else if value.Valid {
				m.Edited = value.Time
			}
		case movie.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				m.URL = value.String
			}
		}
	}
	return nil
}

// QueryPeople queries the "people" edge of the Movie entity.
func (m *Movie) QueryPeople() *CharacterQuery {
	return (&MovieClient{config: m.config}).QueryPeople(m)
}

// QueryComments queries the "comments" edge of the Movie entity.
func (m *Movie) QueryComments() *CommentQuery {
	return (&MovieClient{config: m.config}).QueryComments(m)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movie) Update() *MovieUpdateOne {
	return (&MovieClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movie) Unwrap() *Movie {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("episode_id=")
	builder.WriteString(fmt.Sprintf("%v", m.EpisodeID))
	builder.WriteString(", ")
	builder.WriteString("opening_crawl=")
	builder.WriteString(m.OpeningCrawl)
	builder.WriteString(", ")
	builder.WriteString("director=")
	builder.WriteString(m.Director)
	builder.WriteString(", ")
	builder.WriteString("producer=")
	builder.WriteString(m.Producer)
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(m.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("characters=")
	builder.WriteString(fmt.Sprintf("%v", m.Characters))
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(m.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("edited=")
	builder.WriteString(m.Edited.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(m.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie

func (m Movies) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
