// Code generated by ent, DO NOT EDIT.

package character

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samuelagm/moviex/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// Mass applies equality check predicate on the "mass" field. It's identical to MassEQ.
func Mass(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMass), v))
	})
}

// HairColor applies equality check predicate on the "hair_color" field. It's identical to HairColorEQ.
func HairColor(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColor), v))
	})
}

// SkinColor applies equality check predicate on the "skin_color" field. It's identical to SkinColorEQ.
func SkinColor(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkinColor), v))
	})
}

// EyeColor applies equality check predicate on the "eye_color" field. It's identical to EyeColorEQ.
func EyeColor(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEyeColor), v))
	})
}

// BirthYear applies equality check predicate on the "birth_year" field. It's identical to BirthYearEQ.
func BirthYear(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthYear), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Edited applies equality check predicate on the "edited" field. It's identical to EditedEQ.
func Edited(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdited), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// HeightContains applies the Contains predicate on the "height" field.
func HeightContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeight), v))
	})
}

// HeightHasPrefix applies the HasPrefix predicate on the "height" field.
func HeightHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeight), v))
	})
}

// HeightHasSuffix applies the HasSuffix predicate on the "height" field.
func HeightHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeight), v))
	})
}

// HeightEqualFold applies the EqualFold predicate on the "height" field.
func HeightEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeight), v))
	})
}

// HeightContainsFold applies the ContainsFold predicate on the "height" field.
func HeightContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeight), v))
	})
}

// MassEQ applies the EQ predicate on the "mass" field.
func MassEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMass), v))
	})
}

// MassNEQ applies the NEQ predicate on the "mass" field.
func MassNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMass), v))
	})
}

// MassIn applies the In predicate on the "mass" field.
func MassIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMass), v...))
	})
}

// MassNotIn applies the NotIn predicate on the "mass" field.
func MassNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMass), v...))
	})
}

// MassGT applies the GT predicate on the "mass" field.
func MassGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMass), v))
	})
}

// MassGTE applies the GTE predicate on the "mass" field.
func MassGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMass), v))
	})
}

// MassLT applies the LT predicate on the "mass" field.
func MassLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMass), v))
	})
}

// MassLTE applies the LTE predicate on the "mass" field.
func MassLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMass), v))
	})
}

// MassContains applies the Contains predicate on the "mass" field.
func MassContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMass), v))
	})
}

// MassHasPrefix applies the HasPrefix predicate on the "mass" field.
func MassHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMass), v))
	})
}

// MassHasSuffix applies the HasSuffix predicate on the "mass" field.
func MassHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMass), v))
	})
}

// MassEqualFold applies the EqualFold predicate on the "mass" field.
func MassEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMass), v))
	})
}

// MassContainsFold applies the ContainsFold predicate on the "mass" field.
func MassContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMass), v))
	})
}

// HairColorEQ applies the EQ predicate on the "hair_color" field.
func HairColorEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHairColor), v))
	})
}

// HairColorNEQ applies the NEQ predicate on the "hair_color" field.
func HairColorNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHairColor), v))
	})
}

// HairColorIn applies the In predicate on the "hair_color" field.
func HairColorIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHairColor), v...))
	})
}

// HairColorNotIn applies the NotIn predicate on the "hair_color" field.
func HairColorNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHairColor), v...))
	})
}

// HairColorGT applies the GT predicate on the "hair_color" field.
func HairColorGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHairColor), v))
	})
}

// HairColorGTE applies the GTE predicate on the "hair_color" field.
func HairColorGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHairColor), v))
	})
}

// HairColorLT applies the LT predicate on the "hair_color" field.
func HairColorLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHairColor), v))
	})
}

// HairColorLTE applies the LTE predicate on the "hair_color" field.
func HairColorLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHairColor), v))
	})
}

// HairColorContains applies the Contains predicate on the "hair_color" field.
func HairColorContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHairColor), v))
	})
}

// HairColorHasPrefix applies the HasPrefix predicate on the "hair_color" field.
func HairColorHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHairColor), v))
	})
}

// HairColorHasSuffix applies the HasSuffix predicate on the "hair_color" field.
func HairColorHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHairColor), v))
	})
}

// HairColorEqualFold applies the EqualFold predicate on the "hair_color" field.
func HairColorEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHairColor), v))
	})
}

// HairColorContainsFold applies the ContainsFold predicate on the "hair_color" field.
func HairColorContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHairColor), v))
	})
}

// SkinColorEQ applies the EQ predicate on the "skin_color" field.
func SkinColorEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkinColor), v))
	})
}

// SkinColorNEQ applies the NEQ predicate on the "skin_color" field.
func SkinColorNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkinColor), v))
	})
}

// SkinColorIn applies the In predicate on the "skin_color" field.
func SkinColorIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSkinColor), v...))
	})
}

// SkinColorNotIn applies the NotIn predicate on the "skin_color" field.
func SkinColorNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSkinColor), v...))
	})
}

// SkinColorGT applies the GT predicate on the "skin_color" field.
func SkinColorGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkinColor), v))
	})
}

// SkinColorGTE applies the GTE predicate on the "skin_color" field.
func SkinColorGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkinColor), v))
	})
}

// SkinColorLT applies the LT predicate on the "skin_color" field.
func SkinColorLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkinColor), v))
	})
}

// SkinColorLTE applies the LTE predicate on the "skin_color" field.
func SkinColorLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkinColor), v))
	})
}

// SkinColorContains applies the Contains predicate on the "skin_color" field.
func SkinColorContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSkinColor), v))
	})
}

// SkinColorHasPrefix applies the HasPrefix predicate on the "skin_color" field.
func SkinColorHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSkinColor), v))
	})
}

// SkinColorHasSuffix applies the HasSuffix predicate on the "skin_color" field.
func SkinColorHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSkinColor), v))
	})
}

// SkinColorEqualFold applies the EqualFold predicate on the "skin_color" field.
func SkinColorEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSkinColor), v))
	})
}

// SkinColorContainsFold applies the ContainsFold predicate on the "skin_color" field.
func SkinColorContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSkinColor), v))
	})
}

// EyeColorEQ applies the EQ predicate on the "eye_color" field.
func EyeColorEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEyeColor), v))
	})
}

// EyeColorNEQ applies the NEQ predicate on the "eye_color" field.
func EyeColorNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEyeColor), v))
	})
}

// EyeColorIn applies the In predicate on the "eye_color" field.
func EyeColorIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEyeColor), v...))
	})
}

// EyeColorNotIn applies the NotIn predicate on the "eye_color" field.
func EyeColorNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEyeColor), v...))
	})
}

// EyeColorGT applies the GT predicate on the "eye_color" field.
func EyeColorGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEyeColor), v))
	})
}

// EyeColorGTE applies the GTE predicate on the "eye_color" field.
func EyeColorGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEyeColor), v))
	})
}

// EyeColorLT applies the LT predicate on the "eye_color" field.
func EyeColorLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEyeColor), v))
	})
}

// EyeColorLTE applies the LTE predicate on the "eye_color" field.
func EyeColorLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEyeColor), v))
	})
}

// EyeColorContains applies the Contains predicate on the "eye_color" field.
func EyeColorContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEyeColor), v))
	})
}

// EyeColorHasPrefix applies the HasPrefix predicate on the "eye_color" field.
func EyeColorHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEyeColor), v))
	})
}

// EyeColorHasSuffix applies the HasSuffix predicate on the "eye_color" field.
func EyeColorHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEyeColor), v))
	})
}

// EyeColorEqualFold applies the EqualFold predicate on the "eye_color" field.
func EyeColorEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEyeColor), v))
	})
}

// EyeColorContainsFold applies the ContainsFold predicate on the "eye_color" field.
func EyeColorContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEyeColor), v))
	})
}

// BirthYearEQ applies the EQ predicate on the "birth_year" field.
func BirthYearEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthYear), v))
	})
}

// BirthYearNEQ applies the NEQ predicate on the "birth_year" field.
func BirthYearNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthYear), v))
	})
}

// BirthYearIn applies the In predicate on the "birth_year" field.
func BirthYearIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBirthYear), v...))
	})
}

// BirthYearNotIn applies the NotIn predicate on the "birth_year" field.
func BirthYearNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBirthYear), v...))
	})
}

// BirthYearGT applies the GT predicate on the "birth_year" field.
func BirthYearGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthYear), v))
	})
}

// BirthYearGTE applies the GTE predicate on the "birth_year" field.
func BirthYearGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthYear), v))
	})
}

// BirthYearLT applies the LT predicate on the "birth_year" field.
func BirthYearLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthYear), v))
	})
}

// BirthYearLTE applies the LTE predicate on the "birth_year" field.
func BirthYearLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthYear), v))
	})
}

// BirthYearContains applies the Contains predicate on the "birth_year" field.
func BirthYearContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBirthYear), v))
	})
}

// BirthYearHasPrefix applies the HasPrefix predicate on the "birth_year" field.
func BirthYearHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBirthYear), v))
	})
}

// BirthYearHasSuffix applies the HasSuffix predicate on the "birth_year" field.
func BirthYearHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBirthYear), v))
	})
}

// BirthYearEqualFold applies the EqualFold predicate on the "birth_year" field.
func BirthYearEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBirthYear), v))
	})
}

// BirthYearContainsFold applies the ContainsFold predicate on the "birth_year" field.
func BirthYearContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBirthYear), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), v))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), v))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), v))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), v))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// EditedEQ applies the EQ predicate on the "edited" field.
func EditedEQ(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdited), v))
	})
}

// EditedNEQ applies the NEQ predicate on the "edited" field.
func EditedNEQ(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEdited), v))
	})
}

// EditedIn applies the In predicate on the "edited" field.
func EditedIn(vs ...time.Time) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEdited), v...))
	})
}

// EditedNotIn applies the NotIn predicate on the "edited" field.
func EditedNotIn(vs ...time.Time) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEdited), v...))
	})
}

// EditedGT applies the GT predicate on the "edited" field.
func EditedGT(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEdited), v))
	})
}

// EditedGTE applies the GTE predicate on the "edited" field.
func EditedGTE(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEdited), v))
	})
}

// EditedLT applies the LT predicate on the "edited" field.
func EditedLT(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEdited), v))
	})
}

// EditedLTE applies the LTE predicate on the "edited" field.
func EditedLTE(v time.Time) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEdited), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// HasFilm applies the HasEdge predicate on the "film" edge.
func HasFilm() predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilmTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FilmTable, FilmPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilmWith applies the HasEdge predicate on the "film" edge with a given conditions (other predicates).
func HasFilmWith(preds ...predicate.Movie) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilmInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FilmTable, FilmPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		p(s.Not())
	})
}
