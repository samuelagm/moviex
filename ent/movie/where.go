// Code generated by ent, DO NOT EDIT.

package movie

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/samuelagm/moviex/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// EpisodeID applies equality check predicate on the "episode_id" field. It's identical to EpisodeIDEQ.
func EpisodeID(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeID), v))
	})
}

// OpeningCrawl applies equality check predicate on the "opening_crawl" field. It's identical to OpeningCrawlEQ.
func OpeningCrawl(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpeningCrawl), v))
	})
}

// Director applies equality check predicate on the "director" field. It's identical to DirectorEQ.
func Director(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirector), v))
	})
}

// Producer applies equality check predicate on the "producer" field. It's identical to ProducerEQ.
func Producer(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProducer), v))
	})
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Edited applies equality check predicate on the "edited" field. It's identical to EditedEQ.
func Edited(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdited), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// EpisodeIDEQ applies the EQ predicate on the "episode_id" field.
func EpisodeIDEQ(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDNEQ applies the NEQ predicate on the "episode_id" field.
func EpisodeIDNEQ(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDIn applies the In predicate on the "episode_id" field.
func EpisodeIDIn(vs ...int) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEpisodeID), v...))
	})
}

// EpisodeIDNotIn applies the NotIn predicate on the "episode_id" field.
func EpisodeIDNotIn(vs ...int) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEpisodeID), v...))
	})
}

// EpisodeIDGT applies the GT predicate on the "episode_id" field.
func EpisodeIDGT(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDGTE applies the GTE predicate on the "episode_id" field.
func EpisodeIDGTE(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDLT applies the LT predicate on the "episode_id" field.
func EpisodeIDLT(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEpisodeID), v))
	})
}

// EpisodeIDLTE applies the LTE predicate on the "episode_id" field.
func EpisodeIDLTE(v int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEpisodeID), v))
	})
}

// OpeningCrawlEQ applies the EQ predicate on the "opening_crawl" field.
func OpeningCrawlEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlNEQ applies the NEQ predicate on the "opening_crawl" field.
func OpeningCrawlNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlIn applies the In predicate on the "opening_crawl" field.
func OpeningCrawlIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOpeningCrawl), v...))
	})
}

// OpeningCrawlNotIn applies the NotIn predicate on the "opening_crawl" field.
func OpeningCrawlNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOpeningCrawl), v...))
	})
}

// OpeningCrawlGT applies the GT predicate on the "opening_crawl" field.
func OpeningCrawlGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlGTE applies the GTE predicate on the "opening_crawl" field.
func OpeningCrawlGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlLT applies the LT predicate on the "opening_crawl" field.
func OpeningCrawlLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlLTE applies the LTE predicate on the "opening_crawl" field.
func OpeningCrawlLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlContains applies the Contains predicate on the "opening_crawl" field.
func OpeningCrawlContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlHasPrefix applies the HasPrefix predicate on the "opening_crawl" field.
func OpeningCrawlHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlHasSuffix applies the HasSuffix predicate on the "opening_crawl" field.
func OpeningCrawlHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlEqualFold applies the EqualFold predicate on the "opening_crawl" field.
func OpeningCrawlEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpeningCrawl), v))
	})
}

// OpeningCrawlContainsFold applies the ContainsFold predicate on the "opening_crawl" field.
func OpeningCrawlContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpeningCrawl), v))
	})
}

// DirectorEQ applies the EQ predicate on the "director" field.
func DirectorEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirector), v))
	})
}

// DirectorNEQ applies the NEQ predicate on the "director" field.
func DirectorNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirector), v))
	})
}

// DirectorIn applies the In predicate on the "director" field.
func DirectorIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDirector), v...))
	})
}

// DirectorNotIn applies the NotIn predicate on the "director" field.
func DirectorNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDirector), v...))
	})
}

// DirectorGT applies the GT predicate on the "director" field.
func DirectorGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDirector), v))
	})
}

// DirectorGTE applies the GTE predicate on the "director" field.
func DirectorGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDirector), v))
	})
}

// DirectorLT applies the LT predicate on the "director" field.
func DirectorLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDirector), v))
	})
}

// DirectorLTE applies the LTE predicate on the "director" field.
func DirectorLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDirector), v))
	})
}

// DirectorContains applies the Contains predicate on the "director" field.
func DirectorContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDirector), v))
	})
}

// DirectorHasPrefix applies the HasPrefix predicate on the "director" field.
func DirectorHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDirector), v))
	})
}

// DirectorHasSuffix applies the HasSuffix predicate on the "director" field.
func DirectorHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDirector), v))
	})
}

// DirectorEqualFold applies the EqualFold predicate on the "director" field.
func DirectorEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDirector), v))
	})
}

// DirectorContainsFold applies the ContainsFold predicate on the "director" field.
func DirectorContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDirector), v))
	})
}

// ProducerEQ applies the EQ predicate on the "producer" field.
func ProducerEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProducer), v))
	})
}

// ProducerNEQ applies the NEQ predicate on the "producer" field.
func ProducerNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProducer), v))
	})
}

// ProducerIn applies the In predicate on the "producer" field.
func ProducerIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProducer), v...))
	})
}

// ProducerNotIn applies the NotIn predicate on the "producer" field.
func ProducerNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProducer), v...))
	})
}

// ProducerGT applies the GT predicate on the "producer" field.
func ProducerGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProducer), v))
	})
}

// ProducerGTE applies the GTE predicate on the "producer" field.
func ProducerGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProducer), v))
	})
}

// ProducerLT applies the LT predicate on the "producer" field.
func ProducerLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProducer), v))
	})
}

// ProducerLTE applies the LTE predicate on the "producer" field.
func ProducerLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProducer), v))
	})
}

// ProducerContains applies the Contains predicate on the "producer" field.
func ProducerContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProducer), v))
	})
}

// ProducerHasPrefix applies the HasPrefix predicate on the "producer" field.
func ProducerHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProducer), v))
	})
}

// ProducerHasSuffix applies the HasSuffix predicate on the "producer" field.
func ProducerHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProducer), v))
	})
}

// ProducerEqualFold applies the EqualFold predicate on the "producer" field.
func ProducerEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProducer), v))
	})
}

// ProducerContainsFold applies the ContainsFold predicate on the "producer" field.
func ProducerContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProducer), v))
	})
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseDate), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// EditedEQ applies the EQ predicate on the "edited" field.
func EditedEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdited), v))
	})
}

// EditedNEQ applies the NEQ predicate on the "edited" field.
func EditedNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEdited), v))
	})
}

// EditedIn applies the In predicate on the "edited" field.
func EditedIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEdited), v...))
	})
}

// EditedNotIn applies the NotIn predicate on the "edited" field.
func EditedNotIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEdited), v...))
	})
}

// EditedGT applies the GT predicate on the "edited" field.
func EditedGT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEdited), v))
	})
}

// EditedGTE applies the GTE predicate on the "edited" field.
func EditedGTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEdited), v))
	})
}

// EditedLT applies the LT predicate on the "edited" field.
func EditedLT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEdited), v))
	})
}

// EditedLTE applies the LTE predicate on the "edited" field.
func EditedLTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEdited), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// HasPeople applies the HasEdge predicate on the "people" edge.
func HasPeople() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PeopleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PeopleTable, PeoplePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPeopleWith applies the HasEdge predicate on the "people" edge with a given conditions (other predicates).
func HasPeopleWith(preds ...predicate.Character) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PeopleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PeopleTable, PeoplePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		p(s.Not())
	})
}
