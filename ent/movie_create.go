// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samuelagm/moviex/ent/character"
	"github.com/samuelagm/moviex/ent/comment"
	"github.com/samuelagm/moviex/ent/movie"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (mc *MovieCreate) SetTitle(s string) *MovieCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mc *MovieCreate) SetNillableTitle(s *string) *MovieCreate {
	if s != nil {
		mc.SetTitle(*s)
	}
	return mc
}

// SetEpisodeID sets the "episode_id" field.
func (mc *MovieCreate) SetEpisodeID(i int) *MovieCreate {
	mc.mutation.SetEpisodeID(i)
	return mc
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (mc *MovieCreate) SetOpeningCrawl(s string) *MovieCreate {
	mc.mutation.SetOpeningCrawl(s)
	return mc
}

// SetNillableOpeningCrawl sets the "opening_crawl" field if the given value is not nil.
func (mc *MovieCreate) SetNillableOpeningCrawl(s *string) *MovieCreate {
	if s != nil {
		mc.SetOpeningCrawl(*s)
	}
	return mc
}

// SetDirector sets the "director" field.
func (mc *MovieCreate) SetDirector(s string) *MovieCreate {
	mc.mutation.SetDirector(s)
	return mc
}

// SetProducer sets the "producer" field.
func (mc *MovieCreate) SetProducer(s string) *MovieCreate {
	mc.mutation.SetProducer(s)
	return mc
}

// SetReleaseDate sets the "release_date" field.
func (mc *MovieCreate) SetReleaseDate(t time.Time) *MovieCreate {
	mc.mutation.SetReleaseDate(t)
	return mc
}

// SetCharacters sets the "characters" field.
func (mc *MovieCreate) SetCharacters(s []string) *MovieCreate {
	mc.mutation.SetCharacters(s)
	return mc
}

// SetCreated sets the "created" field.
func (mc *MovieCreate) SetCreated(t time.Time) *MovieCreate {
	mc.mutation.SetCreated(t)
	return mc
}

// SetEdited sets the "edited" field.
func (mc *MovieCreate) SetEdited(t time.Time) *MovieCreate {
	mc.mutation.SetEdited(t)
	return mc
}

// SetURL sets the "url" field.
func (mc *MovieCreate) SetURL(s string) *MovieCreate {
	mc.mutation.SetURL(s)
	return mc
}

// AddPersonIDs adds the "people" edge to the Character entity by IDs.
func (mc *MovieCreate) AddPersonIDs(ids ...int) *MovieCreate {
	mc.mutation.AddPersonIDs(ids...)
	return mc
}

// AddPeople adds the "people" edges to the Character entity.
func (mc *MovieCreate) AddPeople(c ...*Character) *MovieCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddPersonIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (mc *MovieCreate) AddCommentIDs(ids ...int) *MovieCreate {
	mc.mutation.AddCommentIDs(ids...)
	return mc
}

// AddComments adds the "comments" edges to the Comment entity.
func (mc *MovieCreate) AddComments(c ...*Comment) *MovieCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCommentIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mc *MovieCreate) Mutation() *MovieMutation {
	return mc.mutation
}

// Save creates the Movie in the database.
func (mc *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	var (
		err  error
		node *Movie
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Movie)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MovieMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovieCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovieCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MovieCreate) defaults() {
	if _, ok := mc.mutation.Title(); !ok {
		v := movie.DefaultTitle
		mc.mutation.SetTitle(v)
	}
	if _, ok := mc.mutation.OpeningCrawl(); !ok {
		v := movie.DefaultOpeningCrawl
		mc.mutation.SetOpeningCrawl(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovieCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if _, ok := mc.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode_id", err: errors.New(`ent: missing required field "Movie.episode_id"`)}
	}
	if v, ok := mc.mutation.EpisodeID(); ok {
		if err := movie.EpisodeIDValidator(v); err != nil {
			return &ValidationError{Name: "episode_id", err: fmt.Errorf(`ent: validator failed for field "Movie.episode_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.OpeningCrawl(); !ok {
		return &ValidationError{Name: "opening_crawl", err: errors.New(`ent: missing required field "Movie.opening_crawl"`)}
	}
	if _, ok := mc.mutation.Director(); !ok {
		return &ValidationError{Name: "director", err: errors.New(`ent: missing required field "Movie.director"`)}
	}
	if _, ok := mc.mutation.Producer(); !ok {
		return &ValidationError{Name: "producer", err: errors.New(`ent: missing required field "Movie.producer"`)}
	}
	if _, ok := mc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "Movie.release_date"`)}
	}
	if _, ok := mc.mutation.Characters(); !ok {
		return &ValidationError{Name: "characters", err: errors.New(`ent: missing required field "Movie.characters"`)}
	}
	if _, ok := mc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Movie.created"`)}
	}
	if _, ok := mc.mutation.Edited(); !ok {
		return &ValidationError{Name: "edited", err: errors.New(`ent: missing required field "Movie.edited"`)}
	}
	if _, ok := mc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Movie.url"`)}
	}
	return nil
}

func (mc *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: movie.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := mc.mutation.EpisodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldEpisodeID,
		})
		_node.EpisodeID = value
	}
	if value, ok := mc.mutation.OpeningCrawl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOpeningCrawl,
		})
		_node.OpeningCrawl = value
	}
	if value, ok := mc.mutation.Director(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldDirector,
		})
		_node.Director = value
	}
	if value, ok := mc.mutation.Producer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldProducer,
		})
		_node.Producer = value
	}
	if value, ok := mc.mutation.ReleaseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
		_node.ReleaseDate = value
	}
	if value, ok := mc.mutation.Characters(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: movie.FieldCharacters,
		})
		_node.Characters = value
	}
	if value, ok := mc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := mc.mutation.Edited(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldEdited,
		})
		_node.Edited = value
	}
	if value, ok := mc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldURL,
		})
		_node.URL = value
	}
	if nodes := mc.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	builders []*MovieCreate
}

// Save creates the Movie entities in the database.
func (mcb *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Movie, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
