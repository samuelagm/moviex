// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samuelagm/moviex/ent/character"
	"github.com/samuelagm/moviex/ent/comment"
	"github.com/samuelagm/moviex/ent/movie"
	"github.com/samuelagm/moviex/ent/predicate"
)

// MovieUpdate is the builder for updating Movie entities.
type MovieUpdate struct {
	config
	hooks    []Hook
	mutation *MovieMutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (mu *MovieUpdate) Where(ps ...predicate.Movie) *MovieUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MovieUpdate) SetTitle(s string) *MovieUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableTitle(s *string) *MovieUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetEpisodeID sets the "episode_id" field.
func (mu *MovieUpdate) SetEpisodeID(i int) *MovieUpdate {
	mu.mutation.ResetEpisodeID()
	mu.mutation.SetEpisodeID(i)
	return mu
}

// AddEpisodeID adds i to the "episode_id" field.
func (mu *MovieUpdate) AddEpisodeID(i int) *MovieUpdate {
	mu.mutation.AddEpisodeID(i)
	return mu
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (mu *MovieUpdate) SetOpeningCrawl(s string) *MovieUpdate {
	mu.mutation.SetOpeningCrawl(s)
	return mu
}

// SetNillableOpeningCrawl sets the "opening_crawl" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableOpeningCrawl(s *string) *MovieUpdate {
	if s != nil {
		mu.SetOpeningCrawl(*s)
	}
	return mu
}

// SetDirector sets the "director" field.
func (mu *MovieUpdate) SetDirector(s string) *MovieUpdate {
	mu.mutation.SetDirector(s)
	return mu
}

// SetProducer sets the "producer" field.
func (mu *MovieUpdate) SetProducer(s string) *MovieUpdate {
	mu.mutation.SetProducer(s)
	return mu
}

// SetReleaseDate sets the "release_date" field.
func (mu *MovieUpdate) SetReleaseDate(t time.Time) *MovieUpdate {
	mu.mutation.SetReleaseDate(t)
	return mu
}

// SetCharacters sets the "characters" field.
func (mu *MovieUpdate) SetCharacters(s []string) *MovieUpdate {
	mu.mutation.SetCharacters(s)
	return mu
}

// SetCreated sets the "created" field.
func (mu *MovieUpdate) SetCreated(t time.Time) *MovieUpdate {
	mu.mutation.SetCreated(t)
	return mu
}

// SetEdited sets the "edited" field.
func (mu *MovieUpdate) SetEdited(t time.Time) *MovieUpdate {
	mu.mutation.SetEdited(t)
	return mu
}

// SetURL sets the "url" field.
func (mu *MovieUpdate) SetURL(s string) *MovieUpdate {
	mu.mutation.SetURL(s)
	return mu
}

// AddPersonIDs adds the "people" edge to the Character entity by IDs.
func (mu *MovieUpdate) AddPersonIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddPersonIDs(ids...)
	return mu
}

// AddPeople adds the "people" edges to the Character entity.
func (mu *MovieUpdate) AddPeople(c ...*Character) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddPersonIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (mu *MovieUpdate) AddCommentIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddCommentIDs(ids...)
	return mu
}

// AddComments adds the "comments" edges to the Comment entity.
func (mu *MovieUpdate) AddComments(c ...*Comment) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCommentIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mu *MovieUpdate) Mutation() *MovieMutation {
	return mu.mutation
}

// ClearPeople clears all "people" edges to the Character entity.
func (mu *MovieUpdate) ClearPeople() *MovieUpdate {
	mu.mutation.ClearPeople()
	return mu
}

// RemovePersonIDs removes the "people" edge to Character entities by IDs.
func (mu *MovieUpdate) RemovePersonIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemovePersonIDs(ids...)
	return mu
}

// RemovePeople removes "people" edges to Character entities.
func (mu *MovieUpdate) RemovePeople(c ...*Character) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemovePersonIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (mu *MovieUpdate) ClearComments() *MovieUpdate {
	mu.mutation.ClearComments()
	return mu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (mu *MovieUpdate) RemoveCommentIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveCommentIDs(ids...)
	return mu
}

// RemoveComments removes "comments" edges to Comment entities.
func (mu *MovieUpdate) RemoveComments(c ...*Comment) *MovieUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MovieUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MovieUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MovieUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MovieUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MovieUpdate) check() error {
	if v, ok := mu.mutation.EpisodeID(); ok {
		if err := movie.EpisodeIDValidator(v); err != nil {
			return &ValidationError{Name: "episode_id", err: fmt.Errorf(`ent: validator failed for field "Movie.episode_id": %w`, err)}
		}
	}
	return nil
}

func (mu *MovieUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   movie.Table,
			Columns: movie.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
	}
	if value, ok := mu.mutation.EpisodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldEpisodeID,
		})
	}
	if value, ok := mu.mutation.AddedEpisodeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldEpisodeID,
		})
	}
	if value, ok := mu.mutation.OpeningCrawl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOpeningCrawl,
		})
	}
	if value, ok := mu.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldDirector,
		})
	}
	if value, ok := mu.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldProducer,
		})
	}
	if value, ok := mu.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
	}
	if value, ok := mu.mutation.Characters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: movie.FieldCharacters,
		})
	}
	if value, ok := mu.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldCreated,
		})
	}
	if value, ok := mu.mutation.Edited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldEdited,
		})
	}
	if value, ok := mu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldURL,
		})
	}
	if mu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !mu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !mu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MovieUpdateOne is the builder for updating a single Movie entity.
type MovieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieMutation
}

// SetTitle sets the "title" field.
func (muo *MovieUpdateOne) SetTitle(s string) *MovieUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableTitle(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetEpisodeID sets the "episode_id" field.
func (muo *MovieUpdateOne) SetEpisodeID(i int) *MovieUpdateOne {
	muo.mutation.ResetEpisodeID()
	muo.mutation.SetEpisodeID(i)
	return muo
}

// AddEpisodeID adds i to the "episode_id" field.
func (muo *MovieUpdateOne) AddEpisodeID(i int) *MovieUpdateOne {
	muo.mutation.AddEpisodeID(i)
	return muo
}

// SetOpeningCrawl sets the "opening_crawl" field.
func (muo *MovieUpdateOne) SetOpeningCrawl(s string) *MovieUpdateOne {
	muo.mutation.SetOpeningCrawl(s)
	return muo
}

// SetNillableOpeningCrawl sets the "opening_crawl" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableOpeningCrawl(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetOpeningCrawl(*s)
	}
	return muo
}

// SetDirector sets the "director" field.
func (muo *MovieUpdateOne) SetDirector(s string) *MovieUpdateOne {
	muo.mutation.SetDirector(s)
	return muo
}

// SetProducer sets the "producer" field.
func (muo *MovieUpdateOne) SetProducer(s string) *MovieUpdateOne {
	muo.mutation.SetProducer(s)
	return muo
}

// SetReleaseDate sets the "release_date" field.
func (muo *MovieUpdateOne) SetReleaseDate(t time.Time) *MovieUpdateOne {
	muo.mutation.SetReleaseDate(t)
	return muo
}

// SetCharacters sets the "characters" field.
func (muo *MovieUpdateOne) SetCharacters(s []string) *MovieUpdateOne {
	muo.mutation.SetCharacters(s)
	return muo
}

// SetCreated sets the "created" field.
func (muo *MovieUpdateOne) SetCreated(t time.Time) *MovieUpdateOne {
	muo.mutation.SetCreated(t)
	return muo
}

// SetEdited sets the "edited" field.
func (muo *MovieUpdateOne) SetEdited(t time.Time) *MovieUpdateOne {
	muo.mutation.SetEdited(t)
	return muo
}

// SetURL sets the "url" field.
func (muo *MovieUpdateOne) SetURL(s string) *MovieUpdateOne {
	muo.mutation.SetURL(s)
	return muo
}

// AddPersonIDs adds the "people" edge to the Character entity by IDs.
func (muo *MovieUpdateOne) AddPersonIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddPersonIDs(ids...)
	return muo
}

// AddPeople adds the "people" edges to the Character entity.
func (muo *MovieUpdateOne) AddPeople(c ...*Character) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddPersonIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (muo *MovieUpdateOne) AddCommentIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddCommentIDs(ids...)
	return muo
}

// AddComments adds the "comments" edges to the Comment entity.
func (muo *MovieUpdateOne) AddComments(c ...*Comment) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCommentIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (muo *MovieUpdateOne) Mutation() *MovieMutation {
	return muo.mutation
}

// ClearPeople clears all "people" edges to the Character entity.
func (muo *MovieUpdateOne) ClearPeople() *MovieUpdateOne {
	muo.mutation.ClearPeople()
	return muo
}

// RemovePersonIDs removes the "people" edge to Character entities by IDs.
func (muo *MovieUpdateOne) RemovePersonIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemovePersonIDs(ids...)
	return muo
}

// RemovePeople removes "people" edges to Character entities.
func (muo *MovieUpdateOne) RemovePeople(c ...*Character) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemovePersonIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (muo *MovieUpdateOne) ClearComments() *MovieUpdateOne {
	muo.mutation.ClearComments()
	return muo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (muo *MovieUpdateOne) RemoveCommentIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveCommentIDs(ids...)
	return muo
}

// RemoveComments removes "comments" edges to Comment entities.
func (muo *MovieUpdateOne) RemoveComments(c ...*Comment) *MovieUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MovieUpdateOne) Select(field string, fields ...string) *MovieUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Movie entity.
func (muo *MovieUpdateOne) Save(ctx context.Context) (*Movie, error) {
	var (
		err  error
		node *Movie
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Movie)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MovieMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MovieUpdateOne) SaveX(ctx context.Context) *Movie {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MovieUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MovieUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MovieUpdateOne) check() error {
	if v, ok := muo.mutation.EpisodeID(); ok {
		if err := movie.EpisodeIDValidator(v); err != nil {
			return &ValidationError{Name: "episode_id", err: fmt.Errorf(`ent: validator failed for field "Movie.episode_id": %w`, err)}
		}
	}
	return nil
}

func (muo *MovieUpdateOne) sqlSave(ctx context.Context) (_node *Movie, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   movie.Table,
			Columns: movie.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: movie.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Movie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for _, f := range fields {
			if !movie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldTitle,
		})
	}
	if value, ok := muo.mutation.EpisodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldEpisodeID,
		})
	}
	if value, ok := muo.mutation.AddedEpisodeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: movie.FieldEpisodeID,
		})
	}
	if value, ok := muo.mutation.OpeningCrawl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldOpeningCrawl,
		})
	}
	if value, ok := muo.mutation.Director(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldDirector,
		})
	}
	if value, ok := muo.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldProducer,
		})
	}
	if value, ok := muo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldReleaseDate,
		})
	}
	if value, ok := muo.mutation.Characters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: movie.FieldCharacters,
		})
	}
	if value, ok := muo.mutation.Created(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldCreated,
		})
	}
	if value, ok := muo.mutation.Edited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: movie.FieldEdited,
		})
	}
	if value, ok := muo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: movie.FieldURL,
		})
	}
	if muo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !muo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.PeopleTable,
			Columns: movie.PeoplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: character.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !muo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Movie{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
