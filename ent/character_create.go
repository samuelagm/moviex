// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samuelagm/moviex/ent/character"
	"github.com/samuelagm/moviex/ent/movie"
)

// CharacterCreate is the builder for creating a Character entity.
type CharacterCreate struct {
	config
	mutation *CharacterMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CharacterCreate) SetName(s string) *CharacterCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *CharacterCreate) SetNillableName(s *string) *CharacterCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetHeight sets the "height" field.
func (cc *CharacterCreate) SetHeight(s string) *CharacterCreate {
	cc.mutation.SetHeight(s)
	return cc
}

// SetMass sets the "mass" field.
func (cc *CharacterCreate) SetMass(s string) *CharacterCreate {
	cc.mutation.SetMass(s)
	return cc
}

// SetHairColor sets the "hair_color" field.
func (cc *CharacterCreate) SetHairColor(s string) *CharacterCreate {
	cc.mutation.SetHairColor(s)
	return cc
}

// SetSkinColor sets the "skin_color" field.
func (cc *CharacterCreate) SetSkinColor(s string) *CharacterCreate {
	cc.mutation.SetSkinColor(s)
	return cc
}

// SetEyeColor sets the "eye_color" field.
func (cc *CharacterCreate) SetEyeColor(s string) *CharacterCreate {
	cc.mutation.SetEyeColor(s)
	return cc
}

// SetBirthYear sets the "birth_year" field.
func (cc *CharacterCreate) SetBirthYear(s string) *CharacterCreate {
	cc.mutation.SetBirthYear(s)
	return cc
}

// SetGender sets the "gender" field.
func (cc *CharacterCreate) SetGender(s string) *CharacterCreate {
	cc.mutation.SetGender(s)
	return cc
}

// SetFilms sets the "films" field.
func (cc *CharacterCreate) SetFilms(s []string) *CharacterCreate {
	cc.mutation.SetFilms(s)
	return cc
}

// SetCreated sets the "created" field.
func (cc *CharacterCreate) SetCreated(t time.Time) *CharacterCreate {
	cc.mutation.SetCreated(t)
	return cc
}

// SetEdited sets the "edited" field.
func (cc *CharacterCreate) SetEdited(t time.Time) *CharacterCreate {
	cc.mutation.SetEdited(t)
	return cc
}

// SetURL sets the "url" field.
func (cc *CharacterCreate) SetURL(s string) *CharacterCreate {
	cc.mutation.SetURL(s)
	return cc
}

// AddFilmIDs adds the "film" edge to the Movie entity by IDs.
func (cc *CharacterCreate) AddFilmIDs(ids ...int) *CharacterCreate {
	cc.mutation.AddFilmIDs(ids...)
	return cc
}

// AddFilm adds the "film" edges to the Movie entity.
func (cc *CharacterCreate) AddFilm(m ...*Movie) *CharacterCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddFilmIDs(ids...)
}

// Mutation returns the CharacterMutation object of the builder.
func (cc *CharacterCreate) Mutation() *CharacterMutation {
	return cc.mutation
}

// Save creates the Character in the database.
func (cc *CharacterCreate) Save(ctx context.Context) (*Character, error) {
	var (
		err  error
		node *Character
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Character)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CharacterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CharacterCreate) SaveX(ctx context.Context) *Character {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CharacterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CharacterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CharacterCreate) defaults() {
	if _, ok := cc.mutation.Name(); !ok {
		v := character.DefaultName
		cc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CharacterCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Character.name"`)}
	}
	if _, ok := cc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Character.height"`)}
	}
	if _, ok := cc.mutation.Mass(); !ok {
		return &ValidationError{Name: "mass", err: errors.New(`ent: missing required field "Character.mass"`)}
	}
	if _, ok := cc.mutation.HairColor(); !ok {
		return &ValidationError{Name: "hair_color", err: errors.New(`ent: missing required field "Character.hair_color"`)}
	}
	if _, ok := cc.mutation.SkinColor(); !ok {
		return &ValidationError{Name: "skin_color", err: errors.New(`ent: missing required field "Character.skin_color"`)}
	}
	if _, ok := cc.mutation.EyeColor(); !ok {
		return &ValidationError{Name: "eye_color", err: errors.New(`ent: missing required field "Character.eye_color"`)}
	}
	if _, ok := cc.mutation.BirthYear(); !ok {
		return &ValidationError{Name: "birth_year", err: errors.New(`ent: missing required field "Character.birth_year"`)}
	}
	if _, ok := cc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Character.gender"`)}
	}
	if _, ok := cc.mutation.Films(); !ok {
		return &ValidationError{Name: "films", err: errors.New(`ent: missing required field "Character.films"`)}
	}
	if _, ok := cc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Character.created"`)}
	}
	if _, ok := cc.mutation.Edited(); !ok {
		return &ValidationError{Name: "edited", err: errors.New(`ent: missing required field "Character.edited"`)}
	}
	if _, ok := cc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Character.url"`)}
	}
	return nil
}

func (cc *CharacterCreate) sqlSave(ctx context.Context) (*Character, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CharacterCreate) createSpec() (*Character, *sqlgraph.CreateSpec) {
	var (
		_node = &Character{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: character.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: character.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := cc.mutation.Mass(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldMass,
		})
		_node.Mass = value
	}
	if value, ok := cc.mutation.HairColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldHairColor,
		})
		_node.HairColor = value
	}
	if value, ok := cc.mutation.SkinColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSkinColor,
		})
		_node.SkinColor = value
	}
	if value, ok := cc.mutation.EyeColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldEyeColor,
		})
		_node.EyeColor = value
	}
	if value, ok := cc.mutation.BirthYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldBirthYear,
		})
		_node.BirthYear = value
	}
	if value, ok := cc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := cc.mutation.Films(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: character.FieldFilms,
		})
		_node.Films = value
	}
	if value, ok := cc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := cc.mutation.Edited(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldEdited,
		})
		_node.Edited = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldURL,
		})
		_node.URL = value
	}
	if nodes := cc.mutation.FilmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   character.FilmTable,
			Columns: character.FilmPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: movie.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CharacterCreateBulk is the builder for creating many Character entities in bulk.
type CharacterCreateBulk struct {
	config
	builders []*CharacterCreate
}

// Save creates the Character entities in the database.
func (ccb *CharacterCreateBulk) Save(ctx context.Context) ([]*Character, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Character, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharacterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CharacterCreateBulk) SaveX(ctx context.Context) []*Character {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CharacterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CharacterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
